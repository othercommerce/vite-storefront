import { ResolvedConfig, normalizePath } from 'vite';
import path from 'node:path';
import fs from 'node:fs';
import { asLaravel, asComponent } from '../utils/names';
import { scan } from '../utils/scanner';
import { Options } from '../vite-storefront';

type View = {
  laravel: string,
  name: string,
  path: string,
}

export function loadViewsModule(config: ResolvedConfig, options: Options, compile: boolean = true) {
  let local = path.resolve(config.root, options.local, 'Views');
  let vendor = path.resolve(config.root, options.vendor, 'Views');

  let views: Map<string, View> = new Map;
  let lines: string[] = [];

  scan(vendor).forEach((path) => {
    let name = asComponent(vendor, path);
    let laravel = asLaravel(vendor, path);

    path = normalizePath(path);

    views.set(name, { laravel, name, path });
  });

  scan(local).forEach((path) => {
    let name = asComponent(local, path);
    let laravel = asLaravel(local, path);

    path = normalizePath(path);

    views.set(name, { laravel, name, path });
  });

  buildViewsDeclarations(path.resolve(config.root, options.vendor));
  buildViewsDeclarations(path.resolve(config.root, options.local));

  if (!compile) {
    return null;
  }

  views.forEach((resolved) => lines.push(`import ${resolved.name} from '${resolved.path}';`));
  lines.push(`export const Views = {`);
  views.forEach((resolved) => lines.push(`  '${resolved.laravel}': ${resolved.name},`));
  lines.push(`};`);

  return lines.join('\n');
}

function buildViewsDeclarations(target: string) {
  let directory = path.resolve(target, 'Types');
  let declarations = path.resolve(directory, 'views.d.ts');
  let lines = [];

  lines.push(`// THIS FILE IS AUTOGENERATED!`);
  lines.push(`// DO NOT EDIT!`);
  lines.push(`declare module '$views' {`);
  lines.push(`  import { Component } from 'vue';`);
  lines.push(`  export const Views: Record<string, Component>;`);
  lines.push(`}`);

  fs.writeFileSync(declarations, lines.join('\n'));
}
